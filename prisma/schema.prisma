generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            String         @id @default(cuid())
  name          String
  description   String?
  price         Float
  image         String[]
  quantity      Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  rating        Float?         @default(0)
  categoryId    String?
  Reviews       Review[]
  Category      Category?      @relation(fields: [categoryId], references: [id])
  cartProducts  CartProduct[]
  orderProducts OrderProduct[]
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Float    @default(0)
  title     String
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product  @relation(fields: [productId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Blog {
  id        String   @id @default(cuid())
  title     String
  subtitle  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String   @id
  name      String?
  email     String   @unique
  review    Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  carts     Cart[]
}

model OrderProduct {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1) // Cantidad específica de cada producto en la orden
}

model Order {
  id                String           @id @default(cuid())
  userId            String
  total             Float
  isPaid            Boolean          @default(false)
  status            OrderStatus      @default(esperando_envio)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  shippingAddressId String?
  billingAddressId  String?
  BillingAddress    BillingAddress?  @relation(fields: [billingAddressId], references: [id])
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  user              User             @relation(fields: [userId], references: [id])
  orderProducts     OrderProduct[] // Relación con OrderProduct para manejar los productos y sus cantidades
  isStorePickup     Boolean          @default(false) // SAS MAMON SE NOS OLVIDO ENTREGA A TIENDA WEY
}

model Cart {
  id        String        @id @default(cuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  products  CartProduct[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model CartProduct {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
}

model ShippingAddress {
  id          String  @id @default(cuid())
  name        String
  street      String?
  city        String?
  postaleCode String?
  country     String?
  state       String?
  phoneNumber String?
  orders      Order[]
}

model BillingAddress {
  id          String  @id @default(cuid())
  name        String
  street      String?
  city        String?
  postaleCode String?
  country     String?
  state       String?
  phoneNumber String?
  orders      Order[]
}

enum OrderStatus {
  esperando_envio
  enviado
  entregado
}
